```{ojs}
mapping_countries_weights = [
  {"Name": "Austria", "ISO2": "AT", "GAS": 1.56, "OIL": 1.93, "ELECTRICITY": 1.90},
  {"Name": "Belgium", "ISO2": "BE", "GAS": 1.59, "OIL": 1.78, "ELECTRICITY": 1.99},
  {"Name": "Bulgaria", "ISO2": "BG", "GAS": 1.66, "OIL": 1.43, "ELECTRICITY": 1.06},
  {"Name": "Cyprus", "ISO2": "CY", "GAS": undefined, "OIL": 1.49, "ELECTRICITY": 0.50},
  {"Name": "Czech Republic", "ISO2": "CZ", "GAS": 1.46, "OIL": 1.95, "ELECTRICITY": 1.60},
  {"Name": "Germany", "ISO2": "DE", "GAS": 1.55, "OIL": 1.86, "ELECTRICITY": 1.99},
  {"Name": "Denmark", "ISO2": "DK", "GAS": 1.47, "OIL": 1.74, "ELECTRICITY": 1.69},
  {"Name": "Estonia", "ISO2": "EE", "GAS": 1.28, "OIL": 0.89, "ELECTRICITY": 1.12},
  {"Name": "Greece", "ISO2": "EL", "GAS": 1.69, "OIL": 1.45, "ELECTRICITY": 0.90},
  {"Name": "Spain", "ISO2": "ES", "GAS": 2.00, "OIL": 2.00, "ELECTRICITY": 1.65},
  {"Name": "Finland", "ISO2": "FI", "GAS": 1.62, "OIL": 0.50, "ELECTRICITY": 1.25},
  {"Name": "France", "ISO2": "FR", "GAS": 1.40, "OIL": 1.77, "ELECTRICITY": 0.92},
  {"Name": "Croatia", "ISO2": "HR", "GAS": 1.64, "OIL": 1.67, "ELECTRICITY": 1.35},
  {"Name": "Hungary", "ISO2": "HU", "GAS": 1.46, "OIL": 1.75, "ELECTRICITY": 2.00},
  {"Name": "Ireland", "ISO2": "IE", "GAS": 1.07, "OIL": 1.22, "ELECTRICITY": 1.94},
  {"Name": "Italy", "ISO2": "IT", "GAS": 1.66, "OIL": 1.77, "ELECTRICITY": 1.46},
  {"Name": "Lithuania", "ISO2": "LT", "GAS": 1.36, "OIL": 1.69, "ELECTRICITY": 1.70},
  {"Name": "Luxembourg", "ISO2": "LU", "GAS": 1.53, "OIL": 1.79, "ELECTRICITY": 1.42},
  {"Name": "Latvia", "ISO2": "LV", "GAS": 1.30, "OIL": 1.75, "ELECTRICITY": 1.53},
  {"Name": "Malta", "ISO2": "MT", "GAS": 1.47, "OIL": 0.50, "ELECTRICITY": 0.91},
  {"Name": "Netherlands", "ISO2": "NL", "GAS": 1.68, "OIL": 1.95, "ELECTRICITY": 1.85},
  {"Name": "Poland", "ISO2": "PL", "GAS": 1.76, "OIL": 1.91, "ELECTRICITY": 1.96},
  {"Name": "Portugal", "ISO2": "PT", "GAS": 1.88, "OIL": 1.72, "ELECTRICITY": 1.48},
  {"Name": "Romania", "ISO2": "RO", "GAS": 1.61, "OIL": 1.48, "ELECTRICITY": 1.70},
  {"Name": "Sweden", "ISO2": "SE", "GAS": 1.30, "OIL": 0.51, "ELECTRICITY": 1.08},
  {"Name": "Slovenia", "ISO2": "SI", "GAS": 1.70, "OIL": 1.52, "ELECTRICITY": 1.90},
  {"Name": "Slovakia", "ISO2": "SK", "GAS": 0.50, "OIL": 1.80, "ELECTRICITY": 1.87},
];
```

```{ojs}
function get_weights_per_challenge(mapping, challenge) {
  return mapping.filter(d => d[challenge] != undefined).map(({ Name, ISO2, [challenge]: Weight }) => ({ Name, ISO2, Weight }))
	}
```

```{ojs}
function get_countries_per_challenge(mapping, challenge) {
  return mapping
    .filter(d => d[challenge] != undefined)
    .reduce((acc, country) => { acc[country.ISO2] = country.Name;
                                return acc; }, {}
                                )
	}
```

```{ojs}
map_country_name = mapping_countries_weights.reduce((acc, country) => {
  acc[country.ISO2] = country.Name;
  return acc;
}, {})
```

```{ojs}
function unique(data, accessor) {
return Array.from(new Set(accessor ? data.map(accessor) : data));
	}
```

```{ojs}
dateParser = (dateString) => {
  const [year, month, day] = dateString.split('-')
  const date = new Date(Date.UTC(year, month - 1, day, 0, 0, 0))
  const timezoneOffset = date.getTimezoneOffset()
  date.setMinutes(date.getMinutes() - timezoneOffset)
  return date
}
```


```{ojs}

function format_historical_data(data, country) {

  let data_typed = transpose(data).map( d => (
      {
        date: dateParser(d.time),
        values: d.values,
        geo: d.geo
      } 
     )
   )
  
return data_typed.filter(d => d.geo == country);
	}

```


```{ojs}

function format_pred_data(data, country) {

  let pred_typed = transpose(data).map( d => (
      {
        date: dateParser(d.Date),
        values: d.value,
        geo: d.Country,
        model: d.Entries
      } 
     )
   )
  
  return pred_typed.filter(d => d.geo == country);
	}

```

```{ojs}
function format_summary_table_data(data, country, model, country_map) {
  let table = transpose(data).map( d => (
        {
          Date: dateParser(d.Date),
          Model: d.Entries,
          Country: d.Country,
          Forecast: d.value
        } 
       )
     )
    .map(item => {
      const dateStr = item.Date;
      const date = new Date(dateStr);
      const formattedDate = date.toLocaleString('en-US', { month: 'long', year: 'numeric' });
      return { ...item, Date: formattedDate };
    })
    .map(item => {
      const geoCode = item.Country;
      const countryName = country_map[geoCode];
      return { ...item, Country: countryName };
    })
    .filter(d => model.includes(d.Model) && (country.includes("All") || country.includes(d.Country)));

  return table
	}
```

```{ojs}

function format_errors_data(data, country) {

  let data_formatted = transpose(data).map( d => (
        {
          Date: dateParser(d.time),
          Model: d.Entries,
          Country: d.geo,
          Errors: d.error_squared
        } 
       )
     )
    .filter(d => d.Country == country)

  return data_formatted.filter(d => d.Country == country);
	}

```

```{ojs}
function format_ave_errors_data(data, country) {
  return transpose(data).filter(d => d.geo == country);
	}

```

